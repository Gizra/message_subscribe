<?php
/**
 * @file
 * Code for the  message subscribe email feature.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\flag\FlagInterface;

/**
 * Implements hook_flag_action_access().
 */
function message_subscribe_email_flag_action_access($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL) {
  // The 'unflag' action is always allowed here, so only check 'flag'.
  if ($action === 'flag' && $flaggable && strpos($flag->id(), 'email_') === 0) {

    // Get the other flags on that same content.
    /** @var \Drupal\flag\FlaggingInterface[] $user_flaggings */
    $user_flaggings = \Drupal::service('flag')->getAllEntityFlaggings($flaggable, $account);
    $user_flags = [];
    foreach ($user_flaggings as $flagging) {
      $user_flags[$flagging->getFlagId()] = $flagging;
    }

    // Find the corresponding subscribe_* flag.
    $name = str_replace('email_', '', $flag->id());
    $prefix = \Drupal::config('message_subscribe.settings')->get('flag_prefix') . '_';

    // Disable access to the flag when the subscribe flag is unflagged.
    return AccessResult::forbiddenIf(empty($user_flags[$prefix . $name]));
  }
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 *
 * Filters out subscribes to show only email subscribers.
 */
function message_subscribe_email_message_subscribe_get_subscribers_alter(array &$uids, array $values) {
  if (empty($uids)) {
    // Nobody is subscribed to the content.
    return;
  }

  /** @var \Drupal\flag\FlagInterface[] $flags */
  if (!$flags = \Drupal::service('message_subscribe_email.manager')->getFlags()) {
    // No subscribe email related flags.
    return;
  }

  $flag_ids = array();
  foreach ($flags as $flag) {
    $flag_ids[] = $flag->id();
  }

  $query = db_select('flagging', 'f');
  $result = $query->fields('f', array('uid'))
    ->condition('flag_id', $flag_ids, 'IN')
    ->condition('uid', array_keys($uids), 'IN')
    ->groupBy('uid')
    ->execute()
    ->fetchAll();

  foreach ($result as $row) {
    // Add 'email' to the list of notifiers.
    $uids[$row->uid]['notifiers']['email'] = 'email';
  }
}
