<?php
/**
 * @file
 * Code for the  message subscribe email feature.
 */

/**
 * Implements hook_flag_access().
 */
function message_subscribe_email_flag_access($flag, $content_id, $action, $account) {
  if (strpos($flag->name, 'email_') === 0) {

    $entity_type = FLAG_API_VERSION == 3 ? $flag->entity_type : $flag->content_type;

    // Get the other flags on that same content.
    $user_flags = flag_get_user_flags($entity_type, $content_id, $account->uid);

    $name = str_replace('email_', '', $flag->name);
    // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $prefix = variable_get('flag_prefix', 'subscribe') . '_';

    // Disable access to the flag when the subscribe flag is unflagged, but
    // allow unflagging.
    return $action == 'unflag' || !empty($user_flags[$prefix . $name]);
  }
}

/**
 * Implements hook_flag_flag().
 */
function message_subscribe_email_flag_flag($flag, $entity_id, $account, $flagging) {
  message_subscribe_email_flag('flag', $flag, $entity_id, $account);
}

/**
 * Implements hook_flag_unflag().
 */
function message_subscribe_email_flag_unflag($flag, $entity_id, $account, $flagging) {
  message_subscribe_email_flag('unflag', $flag, $entity_id, $account);
}

/**
 * When flagging subscription flags, check if user wants email notifications
 * and flag the user for emails accordingly.
 *
 * @param $op
 *  The operation being performed: one of 'flag' or 'unflag'.
 * @param $flag
 *  The flag object.
 * @param $entity_id
 *  The id of the entity the flag is on.
 * @param $account
 *  The user account performing the action.
 * @param $flagging_id
 *  The flagging entity.
 */
function message_subscribe_email_flag($action, $flag, $content_id, $account) {
  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $prefix = variable_get('flag_prefix', 'subscribe') . '_';

  if (strpos($flag->name, $prefix) === 0) {
    // The flag is a subscription flag.
    $wrapper = entity_metadata_wrapper('user', $account);
    if ($wrapper->message_subscribe_email->value() || $action == 'unflag') {
      // User wants to use email for the subscription.
      // Flag or unflag user for emailing according to action taken.
      $name = str_replace($prefix, '', $flag->name);
      flag($action, 'email_' . $name, $content_id, $account);
    }
  }
}

/**
 * Get Email subscribe related flags ids.
 *
 * Return Flag ids realted to email subscriptions.
 *
 * The flag name should start with "email_".
 *
 * @param $content_type
 *   Optional. The type of content for which to load the flags. Usually 'node'.
 * @param $content_subtype
 *   Optional. The node type for which to load the flags.
 * @param $account
 *   Optional. The user accont to filter available flags. If not set, all
 *   flags for will this node will be returned.
 * @param $reset
 *   Optional. Reset the internal query cache.
 *
 * @return $flags
 *   An array of the structure [fid] = flag_object.
 *
 * @see flag_get_flags()
 */
function message_subscribe_email_flag_get_flags($content_type = NULL, $content_subtype = NULL, $account = NULL, $reset = FALSE) {
  $flags = flag_get_flags($content_type, $content_subtype, $account, $reset);
  $email_flags = array();
  foreach ($flags as $flag_name => $flag) {
    // Check that the flag is using name convention.
    if (strpos($flag_name, 'email') === 0) {
      $email_flags[$flag_name] = $flag;
    }
  }

  return $email_flags;
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 *
 * Filters out subscribes to show only email subscribers.
 */
function message_subscribe_email_message_subscribe_get_subscribers_alter(array &$uids, array $values) {
  if (empty($uids)) {
    // Nobody is subscribed to the content.
    return;
  }

  if (!$flags = message_subscribe_email_flag_get_flags()) {
    // No subscribe email related flags.
    return;
  }

  $flag_ids = array();
  foreach ($flags as $flag) {
    $flag_ids[] = $flag->fid;
  }

  if (FLAG_API_VERSION == 2) {
    $query = db_select('flag_content', 'f');
  }
  else {
    $query = db_select('flagging', 'f');
  }

  $result = $query->fields('f', array('uid'))
    ->condition('fid', $flag_ids, 'IN')
    ->condition('uid', array_keys($uids), 'IN')
    ->groupBy('uid')
    ->execute()
    ->fetchAll();

  foreach ($result as $row) {
    // Add 'email' to the list of notifiers.
    $uids[$row->uid]['notifiers']['email'] = 'email';
  }
}
